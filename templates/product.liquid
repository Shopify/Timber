{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

<div itemscope itemtype="http://schema.org/Product">

  {% assign featured_image = product.selected_or_first_available_variant.featured_image | default: product.featured_image %}

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ featured_image | product_img_url: 'original' }}">

  {% include 'breadcrumb' %}

  <div class="grid">
    <div class="grid-item large--one-half">

      {% comment %}
        If we only have one product image, show a large version of it.
        If we have more than 1, show it then loop through the rest as thumbnails.
      {% endcomment %}
      {% if product.images.size == 0 %}

        <div class="product-photo-container">
          <img src="{{ featured_image | img_url: 'grande' }}" alt="{{ featured_image.alt | escape }}" />
        </div>

      {% else %}

        <div class="product-photo-container">
          <a href="{{ featured_image | img_url: 'original' }}" >
            <img src="{{ featured_image | img_url: 'grande' }}" alt="{{ featured_image.alt | escape }}">
          </a>
        </div>

        {% comment %}
          If we have more than one product image, loop through them and create thumbnails.

          By default, images will link to the original size of themselves. It is recommended
          to add a lightbox or photo-switching effect with JavaScript.
        {% endcomment %}
        {% if product.images.size > 1 %}
          <ul class="product-photo-thumbs grid-uniform">

            {% for image in product.images %}
              <li class="grid-item one-quarter">
                <a href="{{ image.src | img_url: 'original' }}">
                  <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
                </a>
              </li>
            {% endfor %}

          </ul>
        {% endif %}

      {% endif %}

    </div>

    <div class="grid-item large--one-half">

      <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">

        <meta itemprop="priceCurrency" content="{{ shop.currency }}">

        <header class="page-header">
          <h2 itemprop="name">{{ product.title }}</h2>
        </header>

        {% if product.available %}
          <link itemprop="availability" href="http://schema.org/InStock">
        {% else %}
          <link itemprop="availability" href="http://schema.org/OutOfStock">
        {% endif %}

        {% comment %}
          ID addToCartForm is a selector for the ajaxify cart plugin
        {% endcomment %}
        <form action="/cart/add" method="post" enctype="multipart/form-data" id="addToCartForm">

          {% comment %}
            Add product variants as a dropdown.
              - By default, each variant (or combination of variants) will display as its own <option>
              - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

            You can leverage jQuery to add a callback on page load and each time the select element changes:
              - Include option_selection.js (as seen at the bottom of this file)
              - This allows you to use JavaScript anytime the variant dropdown changes
              - This also separates out your variant options (ie. size, color, etc.) to separate select elements

            For more information on products with multiple options, visit:
              - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid

          {% endcomment %}
          <select name="id" id="productSelect" class="product-variants">
            {% for variant in product.variants %}
              {% if variant.available %}

                {% comment %}
                  Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                {% endcomment %}
                <option {% if variant == product.selected_or_first_available_variant %}selected{% endif %} value="{{ variant.id }}">
                  {{ variant.title }} - {{ variant.price | money_with_currency }}
                </option>

              {% else %}
                <option disabled="disabled">
                  {{ variant.title }} - Sold out
                </option>
              {% endif %}
            {% endfor %}
          </select>

          {% comment %}
            Optionally show the 'compare at' or original price of the product.
          {% endcomment %}
          {% assign variant = product.selected_or_first_available_variant %}
          {% if variant.compare_at_price > variant.price %}
            <strong class="h2">
              <span id="productPrice" class="on-sale" itemprop="price">
                {{ variant.price | money }}
              </span>
            </strong>
            <small id="comparePrice">
              Compare at:
              {{ variant.compare_at_price | money }}
            </small>
          {% else %}
          <strong class="h2">
              <span id="productPrice" itemprop="price">
               {{ variant.price | money }}
              </span>
            </strong>
          {% endif %}

          {% comment %}
            Quantity selector is optional
          {% endcomment %}
          <label for="quantity">Qty: </label>
          <input type="number" id="quantity" name="quantity" value="1" min="1">

          <input type="submit" name="add" class="btn" id="addToCart" value="Add to Cart">
        </form>

        <div class="product-description rte" itemprop="description">
          {{ product.description }}
        </div>

      </div>

      {% comment %}
        If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
        in the URL, we can show next/previous links to other products in the collection.
      {% endcomment %}
      {% if collection %}
        {% if collection.previous_product or collection.next_product %}
          <p>

          {% if collection.previous_product %}
            {% capture prev_url %}{{ collection.previous_product}}#content{% endcapture %}
            <span class="left">
              {{ '&larr; Previous Product' | link_to: prev_url }}
            </span>
          {% endif %}

          {% if collection.next_product %}
            {% capture next_url %}{{ collection.next_product}}#content{% endcapture %}
            <span class="right">
              {{ 'Next Product &rarr;' | link_to: next_url }}
            </span>
          {% endif %}

          </p>
        {% endif %}
      {% endif %}

    </div>
  </div>

</div>


{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS below as you need. This is only needed on pages where
  product variants are accessible, so doesn't need to live in theme.liquid.

  Currently, the code below does:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Switches the large product image with the newly selected variant on (if set in the admin)

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}

{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>

var selectCallback = function(variant, selector) {

  var addToCart = $('#addToCart'),
      productPrice = $('#productPrice'),
      comparePrice = $('#comparePrice');

  if (variant) {
    if (variant.available) {
      // We have a valid product variant, so enable the submit button
      addToCart.removeClass('disabled').prop('disabled', false).val('Add to Cart');

    } else {
      // Variant is sold out, disable the submit button
      addToCart.val('Sold Out').addClass('disabled').prop('disabled', true);
    }

    // Regardless of stock, update the product price
    productPrice.html(Shopify.formatMoney(variant.price, "{{ shop.money_format }}"));

    // Also update and show the product's compare price if necessary
    if ( variant.compare_at_price > variant.price ) {
      comparePrice
        .html('Compare at: ' + Shopify.formatMoney(variant.compare_at_price, "{{ shop.money_format }}"))
        .show();
    } else {
      comparePrice.hide();
    }

  } else {
    // The variant doesn't exist. Just a safegaurd for errors, but disable the submit button anyway
    addToCart.val('Unavailable').addClass('disabled').prop('disabled', true);
  }

  if (variant && variant.featured_image) {
    var original_image = $(".product-photo-container img"),
        new_image = variant.featured_image;
    Shopify.Image.switchImage(new_image, original_image[0], function (new_image_src, original_image, element) {
      $(element).parents('a').attr('href', new_image_src);
      $(element).attr('src', new_image_src);
    });
  }
};

jQuery(function($) {

  new Shopify.OptionSelectors('productSelect', {
    product: {{ product | json }},
    onVariantSelected: selectCallback,
    enableHistoryState: true
  });

  // Add label if there is a single product option and it isn't 'Title'. Could be 'Size'.
  {% if product.options.size == 1 and product.options.first != 'Title' %}
    $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first }}</label>');
  {% endif %}

  // Hide selectors if we only have 1 variant and its title contains 'Default'.
  {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
    $('.selector-wrapper').hide();
  {% endif %}

});
</script>